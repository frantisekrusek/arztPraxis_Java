Stand: TestStart-Methoden soeben fertiggestellt.

----------------------------------------------------------------------------------------------------
Schmierzettel:

next:
----------------------------------------------------------------------------------------------------
GROB-PLAN:
FERTIG 1.Testen abschließen /schnell und dirty
IN ARBEIT 2.Programm abrunden, abschließen /schnell, rudimentär, einfache Funktionalität
FERTIG 3.Datenbank         /dirty
4.Spring            /dirty

NEU GELERNT in DIESEM PROJEKT:
-JUnit
-Praxis Datenbank
----------------------------------------------------------------------------------------------------
KONZEPTE:
TDD - Test Driven Development: schreibe immer zuerst den Test und erst danach die dazugehörige Methode.

----------------------------------------------------------------------------------------------------
Vorschlag: Bezugszeit sollte wenn möglich immer Local sein, nur erforderlichenfalls
	Instant. Damit das Programm z.B. die neuen Tagestermine zur lokalen Mitternacht
	erstellt. V.a. aber wegen der Einheitlichkeit.
----------------------------------------------------------------------------------------------------

JDBC
jdbc ubdaten auf jdbc 4.2:
jdbc-Klassen sind in mysql-connector-java-8.0.28.jar
AUCH UPDATE VON MYSQL war notwendig.
mysql-connector-java-8.0.28.jar nach arztPraxis_Java/libs
diese Jar-Datei in den Classpath setzen (Project Structure, Libraries)
Zeile 'Class.forName...' löschen oder url ändern.
gute ANLEITUNG: https://www.codejava.net/java-se/jdbc/connect-to-mysql-database-via-jdbc

----------------------------------------------------------------------------------------------------
TESTEN:
test: Hamcrest, Matcher 'assertThat' - ("Mengenabfragen. Die praktische Methode hasItems() zum Beispiel testet,
ob Elemente in einer Collection sind; ohne Matcher wäre der Test in Java mehr Schreibarbeit.>"

zu Datenbanken?:
The classical example for a mock object is a data provider. In production an implementation to connect to the real
data source is used. But for testing a mock object simulates the data source and ensures that the test conditions
are always the same. ..These mock objects can be provided to the class which is tested. Therefore, the class to be
tested should avoid any hard dependency on external data.
https://www.vogella.com/tutorials/SoftwareTesting/article.html

zu Exceptions:
Tests sollen "normale" Funktionalität + korrekte Fehlerbehandlung (Exceptions ?) prüfen
2.1. Testing for exceptions
Testing that certain exceptions are thrown are be done with the
 org.junit.jupiter.api.Assertions.expectThrows() assert statement. You define the expected Exception class and
 provide code that should throw the exception. -> https://www.vogella.com/tutorials/JUnit/article.html#write-tests-for-the-model-and-the-services
-ensureThatInitializationOfTolkeinCharactorsWorks
-ensureThatEqualsWorksForCharaters




-------------------------------------------------
MySQL 8: root-password: secret
         starten: C:\javaDeveloper412\setup\MySQL Server 8.0\bin\ -> mysqld ->mysql -u root -p

PROBLEM: can't connect to mysql server on 'localhost' (10061) -
-> https://stackoverflow.com/questions/119008/cant-connect-to-mysql-server-on-localhost-10061
-> Task Manager->Dienste->MySQL80->rechte Maustaste,starten.

PROBLEM: Junit Tests:
"WARNING: TestEngine with ID 'junit-jupiter' failed to discover tests"
"java: error: release version 5 not supported"
->
https://stackoverflow.com/questions/70452633/org-junit-platform-commons-junitexception-testengine-with-id-junit-jupiter-fa/70503467
https://stackoverflow.com/questions/59601077/intellij-errorjava-error-release-version-5-not-supported

----------------------------------------------------

templates in sql - TIME statt varchar für starttime

----------
Use Cases textuell: alle Termine werden in einer Kartei abgespeichert. Jeder
Eintrag enthält Zuordnungen/Eigenschaften wie 'frei/besetzt' und Patient.

Organizer for appointments in a medical/therapeutical office.

The DOCTOR and employees can CREATE templates for appointment windows,
eg. Monday 08:15-08:30. Those weekly recurring appointments will be
generated for three weeks in advance. Appointments can be booked by
patients. Bookings can be canceled.

----------------------------------------------------------------------------------------------------
when several updates, update in batches (=chargen=Ladung, Stapel):
prepState.setString(1, "Uprising");
prepState.setString(2, "Bob Marley and the Wailers");
    preparedStatement.addBatch();

prepState.setString(1, "Wildflowers");
prepState.setString(2, "Tom Petty and the Heartbreakers");
    preparedStatement.addBatch();

    int[]  rowsAffected   = preparedStatement.executeBatch();

QU: https://www.infoworld.com/article/3388036/what-is-jdbc-introduction-to-java-database-connectivity.html
----------------------------------------------------------------------------------------------------

SQL Zeit-Typ -> JAVA Zeit-Typ, Möglichkeiten:

-Update auf JDBC 4.2, Instant und Timestamp.

-String in SQL, Instant in Java.

-SQL Timestamp -> Java toTimestamp().


Termine erstellen Methoden:

ODA:-alle Termine bei erst-Start. Problem: noch keine Vorlagen bei erst-Start.
	->Terminerstellung bei Vorlagenerstellung oder
	->Menü-Zwischenschritt 'Vorlagen aktivieren' (alle oder nur einzelne),
	  erst bei Aktivierung werden Termine erstellt (Zwischenspeicherung) und danach
	  alle auf einmal ins repository geschrieben.

----------------------------------------------------------------------------------------------------

Anm: mysql-Datentyp DATETIME
Runde Klammern dienen in SQL zum Gruppieren von Parametern oder Argumenten.

--
Format "ISO 8601 combined date-time format": zB 2007-12-03T10:15:30.00Z
The Z stands for the Zero timezone, as it is offset by 0 from the Coordinated Universal Time (UTC).
Verwendung etwa bei Instant.parse(CharSequence text)

